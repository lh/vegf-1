#!/usr/bin/env python3
"""
Quick check script to verify Streamlit visualization issues.

This script is a simple diagnostic tool to verify that the discontinuation data
in the session state is correct and should be displaying correctly in Streamlit.
"""

import os
import sys
import json
import tempfile
import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st

# This script should be run while Streamlit is active
print("Streamlit Visualization Checker")
print("===============================")
print("This script will check the discontinuation data in the session state.")
print("It should be run while Streamlit is active.")
print("")

# Define paths
script_dir = os.path.dirname(os.path.abspath(__file__))
os.chdir(script_dir)

# Try to find Streamlit session state
session_path = None
if os.path.exists(".streamlit"):
    print("Found .streamlit directory")
    for root, dirs, files in os.walk(".streamlit"):
        for file in files:
            if file.startswith("session_state"):
                session_path = os.path.join(root, file)
                print(f"Found session state at {session_path}")
                break

if session_path:
    # Try to parse session state
    try:
        with open(session_path, 'r') as f:
            session_data = f.read()
            if session_data:
                print("Session data found, but we can't directly parse Streamlit session state files")
    except Exception as e:
        print(f"Error reading session state: {e}")

# Look for temporary files generated by simulation
temp_dir = tempfile.gettempdir()
simulation_files = []
for root, dirs, files in os.walk(temp_dir):
    for file in files:
        if file.endswith(".json") and "simulation" in file:
            simulation_files.append(os.path.join(root, file))

if simulation_files:
    print(f"\nFound {len(simulation_files)} potential simulation result files:")
    for i, file_path in enumerate(simulation_files):
        file_size = os.path.getsize(file_path)
        file_date = os.path.getmtime(file_path)
        print(f"{i+1}. {file_path} ({file_size} bytes, modified {file_date})")
    
    # Try to parse the most recent file
    newest_file = max(simulation_files, key=os.path.getmtime)
    print(f"\nTrying to parse newest file: {newest_file}")
    
    try:
        with open(newest_file, 'r') as f:
            results = json.load(f)
            
            # Check for discontinuation data
            if "discontinuation_counts" in results:
                disc_counts = results["discontinuation_counts"]
                total = sum(disc_counts.values())
                
                print(f"\nDiscontinuation data found: {disc_counts}")
                print(f"Total discontinuations: {total}")
                
                # Display a simple bar chart as demonstration
                fig, ax = plt.subplots(figsize=(10, 6))
                ax.bar(disc_counts.keys(), disc_counts.values())
                ax.set_title("Discontinuation Counts")
                ax.set_ylabel("Count")
                plt.tight_layout()
                plt.savefig("discontinuation_check.png")
                print(f"Saved visualization to {os.path.join(script_dir, 'discontinuation_check.png')}")
                
                # Show that Streamlit SHOULD be displaying this
                print("\nStreamlit SHOULD be displaying this data as a chart.")
                print("If it's not showing in the UI, there may be a rendering or display issue.")
                print("Try clicking the 'Run Simulation' button again, or restart the Streamlit app.")
            else:
                print("\nNo discontinuation_counts found in the simulation results.")
                print("Keys in results:", list(results.keys()))
    except Exception as e:
        print(f"Error parsing simulation results: {e}")
else:
    print("\nNo simulation result files found.")
    print("Please run a simulation in the Streamlit app first.")

print("\nFIX RECOMMENDATION:")
print("1. If you're not seeing discontinuation data in the Streamlit UI:")
print("   - Verify that the simulation is showing debug output with discontinuation counts > 0")
print("   - Check that the data is displayed in the table but not in the chart")
print("   - If only the chart is missing, it could be a rendering issue - try a different browser")
print("2. If discontinuation_counts isn't in the results at all:")
print("   - Our fix might not be working correctly - try running the simulation again")
print("   - Check the fixed files: treat_and_extend_abs.py, treat_and_extend_des.py, simulation_runner.py")