#!/usr/bin/env python3
"""
Compare Treatment Protocols: Treat-and-Treat vs Treat-and-Extend vs Eylea 8mg

This script compares the clinical and economic outcomes of different treatment protocols.
"""

import yaml
from pathlib import Path

def load_protocol_data():
    """Load all protocol files and their associated costs."""
    protocols = {
        'Treat-and-Treat 2mg': {
            'protocol': 'protocols/eylea_2mg_treat_and_treat.yaml',
            'costs': 'protocols/parameter_sets/eylea_2mg_treat_and_treat/nhs_costs.yaml'
        },
        'Treat-and-Extend 2mg': {
            'protocol': 'protocols/eylea.yaml',  # Assuming this exists
            'costs': 'protocols/parameter_sets/eylea/nhs_costs.yaml'  # May need to create
        },
        'Treat-and-Extend 8mg': {
            'protocol': 'protocols/eylea_8mg_v2_revised.yaml',
            'costs': 'protocols/parameter_sets/eylea_8mg/nhs_costs.yaml'
        }
    }
    
    data = {}
    for name, paths in protocols.items():
        protocol_path = Path(paths['protocol'])
        cost_path = Path(paths['costs'])
        
        if protocol_path.exists():
            with open(protocol_path, 'r') as f:
                protocol_data = yaml.safe_load(f)
        else:
            protocol_data = None
            
        if cost_path.exists():
            with open(cost_path, 'r') as f:
                cost_data = yaml.safe_load(f)
        else:
            cost_data = None
            
        data[name] = {
            'protocol': protocol_data,
            'costs': cost_data
        }
    
    return data

def create_comparison_table():
    """Create a comprehensive comparison table."""
    
    print("\n" + "="*80)
    print("TREATMENT PROTOCOL COMPARISON")
    print("="*80)
    
    # Clinical comparison
    clinical_data = [
        ['Protocol', 'Treat-and-Treat 2mg', 'Treat-and-Extend 2mg', 'Treat-and-Extend 8mg'],
        ['Type', 'Fixed intervals', 'Flexible intervals', 'Flexible intervals'],
        ['Loading phase', '3 Ã— monthly (4-5 wks)', '3 Ã— monthly', '3 Ã— monthly'],
        ['Maintenance', 'Fixed q8-9 weeks', 'q4-16 weeks', 'q8-24 weeks'],
        ['Dose modification', 'None', 'Based on activity', 'Stricter criteria'],
        ['Monitoring frequency', 'Low (2/year)', 'High (8-12/year)', 'Medium (6-8/year)'],
        ['Expected VA gain Y1', '~5.5 letters', '~7-8 letters', '~6.7 letters'],
        ['Interval maintenance', 'N/A (fixed)', '~60-70%', '77-79%']
    ]
    
    print("\nðŸ“Š Clinical Characteristics:")
    # Print simple table
    for row in clinical_data:
        print(f"{row[0]:<25} {row[1]:<25} {row[2]:<25} {row[3]:<25}")
    
    # Economic comparison (Year 1)
    economic_data = [
        ['Cost Component', 'Treat-and-Treat 2mg', 'Treat-and-Extend 2mg', 'Treat-and-Extend 8mg'],
        ['Annual injections', '6.5', '6.9', '6.1'],
        ['Drug cost/year', 'Â£3,088', 'Â£3,278', 'Â£10,675'],
        ['Procedure costs/year', 'Â£3,113', 'Â£3,429', 'Â£3,032'],
        ['Total NHS cost/year', 'Â£6,201', 'Â£6,707', 'Â£13,707'],
        ['Total visits/year', '8.5', '10-12', '8-9'],
        ['Patient travel cost', 'Â£56', 'Â£80-96', 'Â£64-72']
    ]
    
    print("\nðŸ’° Economic Comparison (Year 1):")
    # Print simple table
    for row in economic_data:
        print(f"{row[0]:<25} {row[1]:<25} {row[2]:<25} {row[3]:<25}")
    
    # Advantages/Disadvantages
    print("\nðŸ“‹ Protocol Characteristics:")
    
    print("\nðŸ”µ Treat-and-Treat 2mg:")
    print("Advantages:")
    print("  âœ“ Predictable scheduling (patients know all dates)")
    print("  âœ“ Lowest monitoring burden (2 visits/year)")
    print("  âœ“ Can be largely nurse-led")
    print("  âœ“ Lowest total cost (Â£6,201/year)")
    print("  âœ“ Simplified administration")
    print("Disadvantages:")
    print("  âœ— No personalization")
    print("  âœ— May undertreat active disease (25% risk)")
    print("  âœ— May overtreat stable disease (20% risk)")
    print("  âœ— Lower expected vision gains")
    
    print("\nðŸ”µ Treat-and-Extend 2mg:")
    print("Advantages:")
    print("  âœ“ Personalized treatment")
    print("  âœ“ Better vision outcomes")
    print("  âœ“ Can extend intervals when stable")
    print("  âœ“ Responsive to disease activity")
    print("Disadvantages:")
    print("  âœ— High monitoring burden")
    print("  âœ— Unpredictable scheduling")
    print("  âœ— More complex administration")
    print("  âœ— Higher visit count")
    
    print("\nðŸ”µ Treat-and-Extend 8mg:")
    print("Advantages:")
    print("  âœ“ Extended intervals (77-79% maintain)")
    print("  âœ“ Fewer injections (6.1/year)")
    print("  âœ“ Superior anatomic outcomes")
    print("  âœ“ Good vision gains")
    print("Disadvantages:")
    print("  âœ— Highest drug cost (Â£10,675/year)")
    print("  âœ— Exceeds NICE threshold without QALY gains")
    print("  âœ— Real-world IOI risk (3.7%)")
    print("  âœ— Requires stricter monitoring criteria")
    
    # Decision framework
    print("\nðŸŽ¯ Decision Framework:")
    print("\nChoose Treat-and-Treat when:")
    print("  â€¢ NHS capacity is constrained")
    print("  â€¢ Patient compliance is a concern")
    print("  â€¢ Predictability is valued")
    print("  â€¢ Cost minimization is priority")
    
    print("\nChoose Treat-and-Extend 2mg when:")
    print("  â€¢ Optimizing vision outcomes")
    print("  â€¢ Adequate monitoring capacity")
    print("  â€¢ Standard of care required")
    print("  â€¢ Cost-effectiveness acceptable")
    
    print("\nChoose Treat-and-Extend 8mg when:")
    print("  â€¢ Reducing injection burden critical")
    print("  â€¢ Patient convenience paramount")
    print("  â€¢ Budget allows premium pricing")
    print("  â€¢ Extended intervals achievable")
    
    # Cost-effectiveness summary
    print("\nðŸ“Š Cost-Effectiveness Summary:")
    print("â€¢ Treat-and-Treat: Lowest cost, acceptable outcomes")
    print("â€¢ T&E 2mg: Standard cost-effectiveness")
    print("â€¢ T&E 8mg: Requires >0.23 QALY gain for NICE threshold")

if __name__ == "__main__":
    # Note: This is a simplified comparison
    # Full analysis would load actual protocol data
    create_comparison_table()
    
    print("\n" + "="*80)
    print("Note: This comparison uses representative values.")
    print("Actual outcomes depend on patient population and implementation.")
    print("="*80)